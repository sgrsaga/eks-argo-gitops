name: 'Terraform'

on:
  push:
    branches: [ "development", "staging", "production" ]
  pull_request:
    branches: [ "staging", "production" ]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: development

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner in Pirivate repo mode
    # - name: Checkout
    #   uses: actions/checkout@v3
    #   with:
    #     ref : main
    #   env:
    #     GITHUB_TOKEN: $${{ secrets.GIT_REPO_ACCESSS_TOKEN }}

    # Checkout the repository to the GitHub Actions runner in Public repo
    - name: Checkout
      uses: actions/checkout@v3


    # Set AWS Credentials
    - name: Configure AWS credentials with OIDC and Role
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.OIDC_ARN }}
        aws-region: ap-south-1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        pwd
        echo "${GITHUB_REF##*/}"
        echo "${GITHUB_ENV}"
        cd terraform/environment/${GITHUB_REF##*/}/
        pwd
        terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: |
        cd terraform/environment/${GITHUB_REF##*/}/
        terraform fmt

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        cd terraform/environment/${GITHUB_REF##*/}/
        terraform plan -input=false

    # Apply targetted module. We have designed the modules in a way that we can bring up them with some level of independence
    - name: Terraform Apply for Network and EKS modules
      if: github.ref == 'refs/heads/development' && github.event_name == 'push'
      run: |
        cd terraform/environment/${GITHUB_REF##*/}/
        echo ${GITHUB_REF##*/}
        echo ${GITHUB_REF}
        terraform apply -target=module.main_network -target=module.eks_gitops_cluster --auto-approve -input=false

    # # Destroy the whole infrastructure
    # - name: Terraform Destroy
    #   if: github.ref == 'refs/heads/destroy' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false

    # TRy new Trust policy -  "token.actions.githubusercontent.com:sub": "repo:sgrsaga/eks-argo-gitops:environment:development"