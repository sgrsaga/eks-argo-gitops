name: 'Terraform'

on:
  push:
    branches: [ "main" , "Dev" ]
  pull_request:

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: Dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner in Pirivate repo mode
    # - name: Checkout
    #   uses: actions/checkout@v3
    #   with:
    #     ref : main
    #   env:
    #     GITHUB_TOKEN: $${{ secrets.GIT_REPO_ACCESSS_TOKEN }}

    # Checkout the repository to the GitHub Actions runner in Public repo
    - name: Checkout
      uses: actions/checkout@v3


    # Set AWS Credentials
    - name: Configure AWS credentials with OIDC and Role
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.OIDC_ARN }}
        aws-region: ap-south-1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    #- name: Terraform Apply
    #  if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
    #  run: terraform apply -auto-approve -input=false
